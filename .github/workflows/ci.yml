name: ci

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  eslint__tsc:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [24.0.2]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4.0.0
        with:
          version: 10.11.0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
          cache-dependency-path: |
            ./pnpm-lock.yaml
      - name: Restore cache
        uses: actions/cache@v4
        with:
          # See here for caching with `yarn`, `bun` or other package managers https://github.com/actions/cache/blob/main/examples.md or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
      - name: Install Dependencies
        run: pnpm install
      - name: Run ESLint Reviewdog
        uses: reviewdog/action-eslint@2fee6dd72a5419ff4113f694e2068d2a03bb35dd # v1.33.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          eslint_flags: "src/**/*.{ts,tsx}"
      - name: Run tsc
        run: pnpm tsc
